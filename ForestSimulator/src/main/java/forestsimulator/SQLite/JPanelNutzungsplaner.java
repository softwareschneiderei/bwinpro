/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package forestsimulator.SQLite;

import java.io.File;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JFileChooser;
import treegross.base.FunctionInterpreter;
import treegross.base.GenDistribution;
import treegross.base.GenerateXY;
import treegross.base.SIofDistrib;
import treegross.base.Stand;
import treegross.base.Tree;

/**
 *
 * @author nagel
 */
public class JPanelNutzungsplaner extends javax.swing.JPanel {
     Stand st = null;
     String dir = null;
     javax.swing.table.DefaultTableModel dataTable1= new javax.swing.table.DefaultTableModel(
            new Object [][] {  },
            new String [] {
               "Name", "Art", "Schicht","Mischung", "Alter", "Höhe", "G/ha"
            }
        );
     Object[] rowData1={" "," "," "," "," "," "," "};
     String bestaende[] = new String[1000];
     String bestand = "";
     int nBestaende =0;
     double lat = -99.0;
     double lon = -99.0;
     String date = "";

     
     
     
    /**
     * Creates new form JPanelNutzungsplaner
     */
    public JPanelNutzungsplaner(Stand stx, String dirx) {
        initComponents();
        st = stx;
        dir = dirx+System.getProperty("file.separator")+"nutzungsplaner.db";
        String localPath="";
        java.io.File f1 = new java.io.File("");                    
        try{ 
           localPath= f1.getCanonicalPath();
          } catch (Exception e){ }
/*        String finame = localPath+System.getProperty("file.separator")+"sqlnp.ini";
        File fi = new File(finame);
        if ( fi.exists()) {
            try 
              {  
               String s;
   	       BufferedReader in=
	       new BufferedReader(new InputStreamReader(new FileInputStream(finame)));
               dir=in.readLine();
               in.close();
               }
             catch (Exception e){ 
                 dir = dirx+System.getProperty("file.separator")+"nutzungsplaner.db";
             }
            
        }	
*/        
        java.io.File f = new File(dir);
        if ( f.exists()) {
            jLabel1.setText(dir);
        }
        else {
           JFileChooser fc = new JFileChooser();
           DBFileFilter txtFilter = new DBFileFilter();
           txtFilter.setExtension("db");
           fc.addChoosableFileFilter(txtFilter);
           int auswahl = fc.showOpenDialog(this);
           dir = fc.getSelectedFile().getPath();
        }
        jLabel1.setText(dir);
        setVisible(true);
        nBestaende=loadBestaende();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setLayout(new java.awt.BorderLayout());

        jLabel1.setText("jLabel1");
        jPanel2.add(jLabel1);

        jButton2.setText("andere Datenbank");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton2);

        add(jPanel2, java.awt.BorderLayout.SOUTH);

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel2.setText("Suche Bestand");
        jPanel1.add(jLabel2);

        jTextField1.setText("name");
        jTextField1.setPreferredSize(new java.awt.Dimension(232, 20));
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jPanel1.add(jTextField1);

        jLabel3.setText("Flaeche ha");
        jPanel1.add(jLabel3);

        jTextField2.setText("1.0");
        jTextField2.setMinimumSize(new java.awt.Dimension(26, 20));
        jTextField2.setPreferredSize(new java.awt.Dimension(42, 20));
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });
        jPanel1.add(jTextField2);

        jButton1.setText("find");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);

        jButton3.setText("vor");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3);

        jButton4.setText("zurück");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton4);

        add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jTable1.setModel(dataTable1);
        jScrollPane1.setViewportView(jTable1);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // In der Datenbank nach Namen suchen und Tabelle fuellen 
       loadBestand();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // next Stand
        int merk =0;
        for (int i=0;i < nBestaende;i++){
            if (bestaende[i].equals(jTextField1.getText())) { 
                merk = i;
                break;
            }
        }
        if ( merk < nBestaende-1) {
            merk = merk+1;
            jTextField1.setText(bestaende[merk].toString());
        }
        loadBestand();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // back
                // next Stand
        int merk =0;
        for (int i=0;i < nBestaende;i++){
            if (bestaende[i].equals(jTextField1.getText())) { 
                merk = i;
                break;
            }
        }
        if ( merk > 0) {
            merk = merk-1;
            jTextField1.setText(bestaende[merk].toString());
        }
        loadBestand();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser();
        DBFileFilter dbFilter = new DBFileFilter();
        dbFilter.setExtension("db");
        fc.addChoosableFileFilter(dbFilter);
        fc.setFileFilter(dbFilter); 
        fc.setAcceptAllFileFilterUsed(true);
        fc.setCurrentDirectory(new File(dir));
 
        int auswahl = fc.showOpenDialog(this);
        try {
           dir = fc.getSelectedFile().getPath();
           jLabel1.setText(dir);
           setVisible(true);
           nBestaende=loadBestaende();
        }
        catch (Exception eio){System.out.println(eio);}  
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private double setdbh(int code, double a, double h){
        double dgx = 0.0;
        int art = 211;
        if (code < 211) art=111;
        if (code > 500 ) art = 511;
        if (code == 611) art = 611;
        if (code == 711) art = 711;
        if (art == 111) dgx = 2.2133044+0.3372101*a-0.0005661*a*a-0.3666360*h+0.0302228*h*h;
        if (art == 211) dgx = 3.009+0.275*a-0.0004572*a*a-0.3646*h+0.0265*h*h;
        if (art == 511) dgx = 4.999+0.27*a-0.0009989*a*a+0.3669*h+0.0093306*h*h;
        if (art == 611) dgx = 1.3719960+0.5216833*a-0.0019608*a*a+0.2648483*h+0.0116218*h*h;
        if (art == 711) dgx = 0.4691+0.2676*a-0.00067*a*a+0.447*h+0.009401*h*h;
        if (dgx < 7.0) dgx = 7.0;

        dgx =  Math.round(dgx*10.0)/10.0;
        return dgx;
    }
    
    private double setdmax(int code, double dgx, double h){
        double dgm = 0.0;
        int art = 211;
        if (code < 211) art=111;
        if (code > 500 ) art = 511;
        if (code == 611) art = 611;
        if (code == 711) art = 711;
        if (dgx < 7.0) dgx = 7.0;

        dgx =  Math.round(dgx*10.0)/10.0;
        if (art == 111) dgm = 9.35514+1.19655*dgx+0.31098*h;
        if (art == 211) dgm = 9.60310+0.97132*dgx+0.55732*h;
        if (art == 511) dgm = 9.56268+1.15093*dgx+0.24856*h;
        if (art == 611) dgm = 1.9660+1.9492*dgx-0.4995*h;
        if (art == 711) dgm = 10.10099+1.04032*dgx+0.30663*h;
        dgm =  Math.round(dgm*10.0)/10.0;
        return dgm;
    }
    
    private int loadBestaende(){
       int m = 0;
       try{
        Class.forName( "org.sqlite.JDBC" );
        Connection cn = DriverManager.getConnection("jdbc:sqlite:"+dir, "", "" );
        Statement  st = cn.createStatement();
//      
        String namAlt="";
        String name = "neu";
        String sqltxt = "SELECT * FROM Nutzungsplanung ";
        ResultSet rs = st.executeQuery(sqltxt);
        while (rs.next()){
             name = rs.getString("name").toString();
             if (name.equals(namAlt) == false){
                bestaende[m]= name;
                namAlt=name;
                m=m+1;
             }
            }             
         cn.close();     
         } catch (Exception eio){System.out.println(eio);}  
        
        return m;
    }
    
    
    private void loadBestand(){
       boolean found = false; 
       for (int i=dataTable1.getRowCount(); i>0 ; i=i-1){
                dataTable1.removeRow(i-1);
       }
       try{
        Class.forName( "org.sqlite.JDBC" );
        Connection cn = DriverManager.getConnection("jdbc:sqlite:"+dir, "", "" );
        Statement  st = cn.createStatement();
//        
        String name =jTextField1.getText();
        String sqltxt = "SELECT * FROM Nutzungsplanung WHERE name = '"+name+"'";
        ResultSet rs = st.executeQuery(sqltxt);
        int m=0;
        while (rs.next()){
            found = true;
              dataTable1.addRow(rowData1);
              String nam = rs.getString("name").toString();
              jTable1.setValueAt(nam,m,0);
              String art = rs.getString("art").toString();
              jTable1.setValueAt(art,m,1);
              String schicht = rs.getString("schicht").toString();
              jTable1.setValueAt(schicht,m,2);            
              String mischung = rs.getString("mischung").toString();
              jTable1.setValueAt(mischung,m,3);        
              String alt = rs.getString("alt").toString();
              jTable1.setValueAt(alt,m,4);       
              String hoehe = rs.getString("hoehe").toString();
              jTable1.setValueAt(hoehe,m,5);     
              String gha= rs.getString("gha").toString();
              jTable1.setValueAt(gha,m,6);
              lat = 0.0;
              try{
                  lat = Double.parseDouble(rs.getString("lat").toString());
              }catch (Exception e) {lat = -99.0;}
              try{
                  lon = Double.parseDouble(rs.getString("lon").toString());
              }catch (Exception e) {lon = -99.0;}
              date = rs.getString("datum").toString();
              
              m=m+1;
            }             
         cn.close();     
         } catch (Exception eio){System.out.println(eio);}  
       
    }
 
    public Stand createStand(){
        // Make stand
        
        double size= Double.parseDouble(jTextField2.getText());
        size = 0.3;
        st.ncpnt=0;
        st.nspecies=0;
        st.ntrees=0;
        st.addsize(size);
        st.standname=jTextField1.getText();
        if (date.indexOf("-") >=0){
           date = date.substring(date.indexOf("-")+1);
        }   
        if (date.indexOf("-") >=0){
            int m = date.indexOf("-");
            String txt = date.substring(0, m);
            date = date.substring(date.indexOf("-")+1);
            try{
                   st.monat = Integer.parseInt(txt);
            }catch (Exception e) { st.monat = 0;}
        }
        if (date.length() >0){
            try{
                   st.year = Integer.parseInt(date.substring(0,4));
            }catch (Exception e) { st.year = 2017;}
        }
        st.hochwert_m = lat;
        st.rechtswert_m = lon;
        double len = Math.sqrt(10000*st.size);  
        st.addcornerpoint("ECK1",0.0,0.0,0.0);
        st.addcornerpoint("ECK2",0.0,len,0.0);
        st.addcornerpoint("ECK3",len,len,0.0);
        st.addcornerpoint("ECK4",len,0.0,0.0);
        st.center.no="polygon";
        st.center.x =len/2.0;
        st.center.y =len/2.0;
        st.center.z =0.0;
        //Schichten einlesen
        for (int i=0; i<dataTable1.getRowCount() ; i++){
             int art = Integer.parseInt(jTable1.getValueAt(i,1).toString());
             double hg = Double.parseDouble(jTable1.getValueAt(i,5).toString());  
             double g = Double.parseDouble(jTable1.getValueAt(i,6).toString());
             int alt = Integer.parseInt(jTable1.getValueAt(i,4).toString());
             double dg = setdbh(art,alt,hg);
             double dm = setdmax(art, dg, hg);
                        if ( hg > 5.0 && dg > 7.0 && g > 0.0){
             try {
                 GenDistribution gdb = new GenDistribution();
                 gdb.weibull(st, art, alt, dg, hg, dm, g * st.size,false);

                 SIofDistrib siod = new SIofDistrib();
                 FunctionInterpreter fi = new FunctionInterpreter();
                 siod.si(st, art, alt, dg, hg);
                 for (int j = 0; j < st.ntrees; j++) {
                    if (st.tr[j].h == 0.0) {
                       Tree tree = new Tree();
                       tree.code = art;
                       tree.sp = st.tr[j].sp;
                       tree.sp.dg = dg;
                       tree.sp.hg = hg;
                       tree.sp.h100 = 0.0;
                       tree.sp.d100 = 0.0;
                       tree.d = st.tr[j].d;
                       tree.code = st.tr[j].code;
                       tree.sp = st.tr[j].sp;
                       tree.st = st;
//                                st.tr[j].h = fi.getValueForTree(tree, tree.sp.spDef.uniformHeightCurveXML) + fi.getValueForTree(tree, tree.sp.spDef.heightVariationXML) * nd.value(3.0);
                       st.tr[j].h = fi.getValueForTree(tree, tree.sp.spDef.uniformHeightCurveXML) ;
                    }
                 }
                 for (int j = 0; j < st.ntrees; j++) {
                      st.tr[j].setMissingData();
                 }
                 GenerateXY gxy = null;
                 gxy = new GenerateXY();
                 gxy.setGroupRadius(0.0);
                 gxy.zufall(st);
                 st.sortbyd();
                 st.descspecies();
               } catch (Exception ex) {}
           
             }
       }
       return(st);

    }
    
    public void saveSetting(){
        java.io.File f = new java.io.File(""); 
        String localPath="";
        try{ 
           localPath= f.getCanonicalPath();
          } catch (Exception e){ }
        String finame = localPath+System.getProperty("file.separator")+"sqlnp.ini";

        try
        {
            java.io.PrintWriter ausgabe = new java.io.PrintWriter(new java.io.FileWriter(finame));
            ausgabe.println(dir);
            ausgabe.close();
        }
        catch(java.io.IOException e){}
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
