/* http://www.nw-fva.de
   Version 07-11-2008

   (c) 2002 Juergen Nagel, Northwest German Forest Research Station, 
       Grätzelstr.2, 37079 Göttingen, Germany
       E-Mail: Juergen.Nagel@nw-fva.de
 
This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT  WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
 */
package forestsimulator.standsimulation;
import java.awt.Frame;
import treegross.base.*;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.ProcessingInstruction;
import org.jdom.output.XMLOutputter;
import org.jdom.input.*;
import java.net.*;
import java.text.*;
import java.io.*;
import java.util.*;
import javax.swing.DefaultListModel;
import javax.swing.JDialog;
import org.jdom.JDOMException;
import treegross.base.thinning.HeightBasedThinning;
import treegross.base.thinning.ThinningDefinitions;


/**
 *
 * @author  nagel
 */
public class TgSpeciesManXML extends JDialog {
    
    SpeciesDef spd[] = new SpeciesDef[100];
    int nspd = 0;
    static Element rootElt;
    DefaultListModel listModel = new DefaultListModel();
    String urlname = null;

    
    public TgSpeciesManXML(Frame parent, boolean modal, String workdir, String fn) {
        super(parent, modal);
        initComponents();
        urlname=workdir+System.getProperty("file.separator")+"models"+System.getProperty("file.separator")+fn;
        loadXMLFile();
//        int m = 1+ (int)(scr.width*0.1);
//        TableColumn col = jTable1.getColumnModel().getColumn( 0 );
//        col.setPreferredWidth(m );
//        TableColumn col1 = jTable1.getColumnModel().getColumn( 1 );
//        m = 1+ (int)(scr.width*0.8);
//        col1.setPreferredWidth(m);
        if (nspd > 0 ){
          loadTable(0);
          jList1.setSelectedIndex(0);
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        generalSettingsLabel = new javax.swing.JLabel();
        modelRegionLabel = new javax.swing.JLabel();
        modelRegionTextField = new javax.swing.JTextField();
        randomnessCheckBox = new javax.swing.JCheckBox();
        ingrowthCheckBox = new javax.swing.JCheckBox();
        deadWoodModuleCheckBox = new javax.swing.JCheckBox();
        timeStepLabel = new javax.swing.JLabel();
        timeStepTextField = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        authorTextField = new javax.swing.JTextField();
        dateLabel = new javax.swing.JLabel();
        dateTextField = new javax.swing.JTextField();
        lastUpdateLabel = new javax.swing.JLabel();
        lastUpdateTextField = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        literatureTextField = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        sortingModuleLabel = new javax.swing.JLabel();
        sortingModuleTextField = new javax.swing.JTextField();
        biomassLabel = new javax.swing.JLabel();
        biomassTextField = new javax.swing.JTextField();
        deadWoodModuleLabel = new javax.swing.JLabel();
        deadWoodModuleTextField = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        selectedSpeciesLabel = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        saveButton = new javax.swing.JButton();
        saveAsNewButton = new javax.swing.JButton();
        saveSettingsButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        treeSpeciesLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("forestsimulator/gui"); // NOI18N
        setTitle(bundle.getString("TgSpeciesManXML.title")); // NOI18N
        setBackground(java.awt.Color.white);

        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        generalSettingsLabel.setText(bundle.getString("TgSpeciesManXML.generalSettingsLabel.text")); // NOI18N
        jPanel6.add(generalSettingsLabel);

        modelRegionLabel.setText(bundle.getString("TgSpeciesManXML.modelRegionLabel.text")); // NOI18N
        jPanel6.add(modelRegionLabel);

        modelRegionTextField.setText(bundle.getString("TgSpeciesManXML.modelRegionTextField.text")); // NOI18N
        modelRegionTextField.setPreferredSize(new java.awt.Dimension(259, 20));
        jPanel6.add(modelRegionTextField);

        randomnessCheckBox.setSelected(true);
        randomnessCheckBox.setText(bundle.getString("TgSpeciesManXML.randomnessCheckBox.text")); // NOI18N
        jPanel6.add(randomnessCheckBox);

        ingrowthCheckBox.setText(bundle.getString("TgSpeciesManXML.ingrowthCheckBox.text")); // NOI18N
        ingrowthCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ingrowthCheckBoxActionPerformed(evt);
            }
        });
        jPanel6.add(ingrowthCheckBox);

        deadWoodModuleCheckBox.setText(bundle.getString("TgSpeciesManXML.deadWoodModuleCheckBox.text")); // NOI18N
        jPanel6.add(deadWoodModuleCheckBox);

        timeStepLabel.setText(bundle.getString("TgSpeciesManXML.timeStepLabel.text")); // NOI18N
        jPanel6.add(timeStepLabel);

        timeStepTextField.setText(bundle.getString("TgSpeciesManXML.timeStepTextField.text")); // NOI18N
        timeStepTextField.setPreferredSize(new java.awt.Dimension(22, 20));
        timeStepTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeStepTextFieldActionPerformed(evt);
            }
        });
        jPanel6.add(timeStepTextField);

        jPanel4.add(jPanel6, java.awt.BorderLayout.NORTH);

        jPanel7.setLayout(new java.awt.BorderLayout());

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        authorTextField.setText(bundle.getString("TgSpeciesManXML.authorTextField.text")); // NOI18N
        authorTextField.setToolTipText(bundle.getString("TgSpeciesManXML.authorTextField.toolTipText")); // NOI18N
        authorTextField.setPreferredSize(new java.awt.Dimension(232, 20));
        authorTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                authorTextFieldActionPerformed(evt);
            }
        });
        jPanel8.add(authorTextField);

        dateLabel.setText(bundle.getString("TgSpeciesManXML.dateLabel.text")); // NOI18N
        jPanel8.add(dateLabel);

        dateTextField.setText(bundle.getString("TgSpeciesManXML.dateTextField.text")); // NOI18N
        dateTextField.setPreferredSize(new java.awt.Dimension(80, 20));
        jPanel8.add(dateTextField);

        lastUpdateLabel.setText(bundle.getString("TgSpeciesManXML.lastUpdateLabel.text")); // NOI18N
        lastUpdateLabel.setToolTipText(bundle.getString("TgSpeciesManXML.lastUpdateLabel.toolTipText")); // NOI18N
        jPanel8.add(lastUpdateLabel);

        lastUpdateTextField.setText(bundle.getString("TgSpeciesManXML.lastUpdateTextField.text")); // NOI18N
        lastUpdateTextField.setPreferredSize(new java.awt.Dimension(80, 20));
        jPanel8.add(lastUpdateTextField);

        jPanel7.add(jPanel8, java.awt.BorderLayout.NORTH);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setToolTipText(bundle.getString("TgSpeciesManXML.jTextArea1.toolTipText")); // NOI18N
        jTextArea1.setPreferredSize(new java.awt.Dimension(164, 74));
        jScrollPane4.setViewportView(jTextArea1);

        jPanel7.add(jScrollPane4, java.awt.BorderLayout.CENTER);

        literatureTextField.setText(bundle.getString("TgSpeciesManXML.literatureTextField.text")); // NOI18N
        literatureTextField.setToolTipText(bundle.getString("TgSpeciesManXML.literatureTextField.toolTipText")); // NOI18N
        jPanel7.add(literatureTextField, java.awt.BorderLayout.PAGE_END);

        jPanel4.add(jPanel7, java.awt.BorderLayout.CENTER);

        jPanel9.setLayout(new java.awt.GridLayout(1, 6));

        sortingModuleLabel.setText(bundle.getString("TgSpeciesManXML.sortingModuleLabel.text")); // NOI18N
        jPanel9.add(sortingModuleLabel);

        sortingModuleTextField.setText(bundle.getString("TgSpeciesManXML.sortingModuleTextField.text")); // NOI18N
        sortingModuleTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortingModuleTextFieldActionPerformed(evt);
            }
        });
        jPanel9.add(sortingModuleTextField);

        biomassLabel.setText(bundle.getString("TgSpeciesManXML.biomassLabel.text")); // NOI18N
        jPanel9.add(biomassLabel);

        biomassTextField.setText(bundle.getString("TgSpeciesManXML.biomassTextField.text")); // NOI18N
        jPanel9.add(biomassTextField);

        deadWoodModuleLabel.setText(bundle.getString("TgSpeciesManXML.deadWoodModuleLabel.text")); // NOI18N
        jPanel9.add(deadWoodModuleLabel);

        deadWoodModuleTextField.setText(bundle.getString("TgSpeciesManXML.deadWoodModuleTextField.text")); // NOI18N
        jPanel9.add(deadWoodModuleTextField);

        jPanel4.add(jPanel9, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jPanel4, java.awt.BorderLayout.NORTH);

        jPanel1.setLayout(new java.awt.BorderLayout());

        selectedSpeciesLabel.setText(bundle.getString("TgSpeciesManXML.selectedSpeciesLabel.text")); // NOI18N
        jPanel1.add(selectedSpeciesLabel, java.awt.BorderLayout.PAGE_START);

        jPanel5.setLayout(new java.awt.BorderLayout());

        jScrollPane2.setAutoscrolls(true);

        jTable1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Variable", "XML Code"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jPanel5.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel5, java.awt.BorderLayout.CENTER);

        saveButton.setText(bundle.getString("TgSpeciesManXML.saveButton.text")); // NOI18N
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        saveAsNewButton.setText(bundle.getString("TgSpeciesManXML.saveAsNewButton.text")); // NOI18N
        saveAsNewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsNewButtonActionPerformed(evt);
            }
        });

        saveSettingsButton.setText(bundle.getString("TgSpeciesManXML.saveSettingsButton.text")); // NOI18N
        saveSettingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveSettingsButtonActionPerformed(evt);
            }
        });

        deleteButton.setText(bundle.getString("TgSpeciesManXML.deleteButton.text")); // NOI18N
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(saveButton)
                .addGap(15, 15, 15)
                .addComponent(saveAsNewButton)
                .addGap(21, 21, 21)
                .addComponent(deleteButton)
                .addGap(16, 16, 16)
                .addComponent(saveSettingsButton)
                .addContainerGap(625, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveSettingsButton)
                    .addComponent(saveButton)
                    .addComponent(saveAsNewButton)
                    .addComponent(deleteButton))
                .addGap(37, 37, 37))
        );

        jPanel1.add(jPanel3, java.awt.BorderLayout.SOUTH);

        jScrollPane3.setViewportView(jPanel1);

        getContentPane().add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jPanel2.setPreferredSize(new java.awt.Dimension(100, 600));
        jPanel2.setLayout(new java.awt.BorderLayout());

        treeSpeciesLabel.setText(bundle.getString("TgSpeciesManXML.treeSpeciesLabel.text")); // NOI18N
        jPanel2.add(treeSpeciesLabel, java.awt.BorderLayout.NORTH);

        jList1.setModel(listModel);
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        jPanel2.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.WEST);

        setSize(new java.awt.Dimension(1196, 820));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        int m = jList1.getSelectedIndex();
       
        for (int i=m+1;i< nspd;i++){
            spd[i-1]=spd[i];
        }
        nspd = nspd -1;
       

    }//GEN-LAST:event_deleteButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
       int m = jList1.getSelectedIndex(); //get SelectedIndex from List
       saveTable(m);

    }//GEN-LAST:event_saveButtonActionPerformed

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
       int m = jList1.getSelectedIndex(); //get SelectedIndex from List
       loadTable(m);

    }//GEN-LAST:event_jList1ValueChanged

    private void saveSettingsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveSettingsButtonActionPerformed
        saveXMLFile();
        dispose();
    }//GEN-LAST:event_saveSettingsButtonActionPerformed

    private void saveAsNewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsNewButtonActionPerformed
        spd[nspd] = new SpeciesDef();
        saveTable(nspd);
        nspd = nspd +1;
       
        renewList();
    }//GEN-LAST:event_saveAsNewButtonActionPerformed

private void ingrowthCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ingrowthCheckBoxActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_ingrowthCheckBoxActionPerformed

private void timeStepTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeStepTextFieldActionPerformed
    // TODO add your handling code here:
}//GEN-LAST:event_timeStepTextFieldActionPerformed

    private void sortingModuleTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortingModuleTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sortingModuleTextFieldActionPerformed

    private void authorTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_authorTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_authorTextFieldActionPerformed

    private void renewList(){
        listModel.removeAllElements();
        listModel.clear();
        for (int i=0;i<nspd;i++) {listModel.addElement((String)spd[i].shortName);}
    }
    
    private void saveTable(int m){
        SpeciesDefMap sdm = new SpeciesDefMap();
        spd[m].code = Integer.parseInt((String) jTable1.getValueAt(0,1));
        spd[m].shortName=(String) jTable1.getValueAt(1,1);
        spd[m].longName=(String) jTable1.getValueAt(2,1);
        spd[m].latinName=(String) jTable1.getValueAt(3,1);
        spd[m].internalCode = Integer.parseInt((String) jTable1.getValueAt(4,1));
        spd[m].codeGroup = Integer.parseInt((String) jTable1.getValueAt(5,1));
        spd[m].handledLikeCode = Integer.parseInt((String) jTable1.getValueAt(6,1));
        spd[m].heightCurve = getInt((String) jTable1.getValueAt(7,1));
        spd[m].uniformHeightCurveXML=sdm.initTGFunction(jTable1.getValueAt(8,1).toString());
        spd[m].heightVariationXML=sdm.initTGFunction(jTable1.getValueAt(9,1).toString());
        spd[m].diameterDistributionXML=sdm.initTGFunction(jTable1.getValueAt(10,1).toString());
        spd[m].volumeFunctionXML=sdm.initTGFunction(jTable1.getValueAt(11,1).toString());
        spd[m].stemVolumeFunctionXML=(String) jTable1.getValueAt(12,1);
        spd[m].crownwidthXML=sdm.initTGFunction(jTable1.getValueAt(13,1).toString());
        spd[m].crownbaseXML=sdm.initTGFunction(jTable1.getValueAt(14,1).toString());
        spd[m].crownType = getInt((String) jTable1.getValueAt(15,1));
        spd[m].siteindexXML=sdm.initTGFunction(jTable1.getValueAt(16,1).toString());
        spd[m].siteindexHeightXML=sdm.initTGFunction(jTable1.getValueAt(17,1).toString());
        spd[m].potentialHeightIncrementXML=sdm.initTGFunction(jTable1.getValueAt(18,1).toString());
        spd[m].heightIncrementXML=sdm.initTGFunction(jTable1.getValueAt(19,1).toString());
        spd[m].heightIncrementError = getDouble((String) jTable1.getValueAt(20,1));
        spd[m].diameterIncrementXML=sdm.initTGFunction(jTable1.getValueAt(21,1).toString());
        spd[m].diameterIncrementError = getDouble((String) jTable1.getValueAt(22,1));
        spd[m].maximumDensityXML = sdm.initTGFunction(jTable1.getValueAt(23,1).toString());
        spd[m].maximumAge = getInt((String) jTable1.getValueAt(24,1));
        spd[m].ingrowthXML = (String) jTable1.getValueAt(25,1);
        spd[m].decayXML = sdm.initTGFunction(jTable1.getValueAt(26,1).toString());
        spd[m].cropTreeNumber = getInt((String) jTable1.getValueAt(37,1));
        spd[m].targetDiameter = getDouble((String) jTable1.getValueAt(27,1));
        spd[m].heightOfThinningStart = getDouble((String) jTable1.getValueAt(28,1));
        spd[m].dynamicThinning = extractDynamicThinning((String) jTable1.getValueAt(29,1));
        spd[m].colorXML = (String) jTable1.getValueAt(30,1);
        spd[m].competitionXML = (String) jTable1.getValueAt(31,1);
        spd[m].taperFunctionXML = (String) jTable1.getValueAt(32,1);
        spd[m].coarseRootBiomass = (String) jTable1.getValueAt(33,1);
        spd[m].smallRootBiomass = (String) jTable1.getValueAt(34,1);
        spd[m].fineRootBiomass = (String) jTable1.getValueAt(35,1);
        spd[m].totalRootBiomass = (String) jTable1.getValueAt(36,1);
    }

    private int getInt(String s) {
        int i = -9;
        try {
            i = Integer.parseInt(s);
        } catch (NumberFormatException e) {
            System.out.println(e);
        }
        return i;
    }

    private double getDouble(String s) {
        double d = -9;
        try {
            d = Double.parseDouble(s);
        } catch (NumberFormatException e) {
            System.out.println(e);
        }
        return d;
    }
    
    private void loadXMLFile() {
        SpeciesDefMap sdm = new SpeciesDefMap();
        nspd = 0;
        try {
            String fname = "";

            int m = urlname.toUpperCase().indexOf("FILE");
            int m2 = urlname.toUpperCase().indexOf("HTTP");
            if (m < 0 && m2 < 0) {
                fname = "file:///" + urlname;
            } else {
                fname = urlname;
            }
            URL url = new URL(fname);
            SAXBuilder builder = new SAXBuilder();
            URLConnection urlcon = url.openConnection();

            Document doc = builder.build(urlcon.getInputStream());

            Element sortimente = doc.getRootElement();
            List<Element> Sortiment = sortimente.getChildren("SpeciesDefinition");
            for (Element sortiment : Sortiment) {
                spd[nspd] = new SpeciesDef();
                spd[nspd].code = Integer.parseInt(sortiment.getChild("Code").getText());
                spd[nspd].internalCode = Integer.parseInt(sortiment.getChild("InternalCode").getText());
                spd[nspd].shortName = sortiment.getChild("ShortName").getText();
                spd[nspd].longName = sortiment.getChild("LongName").getText();
                spd[nspd].latinName = sortiment.getChild("LatinName").getText();
                spd[nspd].codeGroup = Integer.parseInt(sortiment.getChild("CodeGroup").getText());
                spd[nspd].handledLikeCode = Integer.parseInt(sortiment.getChild("HandledLikeCode").getText());
                String temp = sortiment.getChild("HeightCurve").getText();
                int ix = Integer.parseInt(temp);
                spd[nspd].heightCurve = ix;
                spd[nspd].uniformHeightCurveXML = sdm.initTGFunction(sortiment.getChild("UniformHeightCurveXML").getText());
                spd[nspd].heightVariationXML = sdm.initTGFunction(sortiment.getChild("HeightVariation").getText());
                spd[nspd].diameterDistributionXML = sdm.initTGFunction(sortiment.getChild("DiameterDistributionXML").getText());
                spd[nspd].volumeFunctionXML = sdm.initTGFunction(sortiment.getChild("VolumeFunctionXML").getText());
                spd[nspd].crownwidthXML = sdm.initTGFunction(sortiment.getChild("Crownwidth").getText());
                spd[nspd].crownbaseXML = sdm.initTGFunction(sortiment.getChild("Crownbase").getText());
                spd[nspd].crownType = Integer.parseInt(sortiment.getChild("CrownType").getText());
                try {
                    spd[nspd].cropTreeNumber = stripCommentsFromInt(sortiment.getChild("CropTreeNumber").getText(), 100);
                } catch (Exception e) {
                    System.out.println("Number of crop trees ist nicht definiert: ");
                    spd[nspd].cropTreeNumber = 100;
                }

                spd[nspd].siteindexXML = sdm.initTGFunction(sortiment.getChild("SiteIndex").getText());
                spd[nspd].siteindexHeightXML = sdm.initTGFunction(sortiment.getChild("SiteIndexHeight").getText());
                spd[nspd].potentialHeightIncrementXML = sdm.initTGFunction(sortiment.getChild("PotentialHeightIncrement").getText());
                spd[nspd].heightIncrementXML = sdm.initTGFunction(sortiment.getChild("HeightIncrement").getText());
                spd[nspd].heightIncrementError = Double.parseDouble(sortiment.getChild("HeightIncrementError").getText());
                spd[nspd].diameterIncrementXML = sdm.initTGFunction(sortiment.getChild("DiameterIncrement").getText());
                spd[nspd].diameterIncrementError = Double.parseDouble(sortiment.getChild("DiameterIncrementError").getText());
                spd[nspd].maximumDensityXML = sdm.initTGFunction(sortiment.getChild("MaximumDensity").getText());
                spd[nspd].maximumAge = Integer.parseInt(sortiment.getChild("MaximumAge").getText());
                spd[nspd].ingrowthXML = sortiment.getChild("Ingrowth").getText();
                spd[nspd].decayXML = sdm.initTGFunction(sortiment.getChild("Decay").getText());
                spd[nspd].targetDiameter = Double.parseDouble(sortiment.getChild("TargetDiameter").getText());
                spd[nspd].heightOfThinningStart = Double.parseDouble(sortiment.getChild("HeightOfThinningStart").getText());
                spd[nspd].dynamicThinning = extractDynamicThinning(sortiment.getChild("ModerateThinning").getText());
                spd[nspd].colorXML = sortiment.getChild("Color").getText();
                spd[nspd].competitionXML = sortiment.getChild("Competition").getText();
                spd[nspd].taperFunctionXML = sortiment.getChild("TaperFunction").getText();
                try {
                    spd[nspd].stemVolumeFunctionXML = sortiment.getChild("StemVolumeFunction").getText();
                } catch (Exception e) {
                    System.out.println("Schaftholz ist nicht definiert: ");
                }
                spd[nspd].coarseRootBiomass = sortiment.getChild("CoarseRootBiomass").getText();
                spd[nspd].smallRootBiomass = sortiment.getChild("SmallRootBiomass").getText();
                spd[nspd].fineRootBiomass = sortiment.getChild("FineRootBiomass").getText();
                spd[nspd].totalRootBiomass = sortiment.getChild("TotalRootBiomass").getText();

                nspd = nspd + 1;
            }

            Element einstellung = doc.getRootElement();
            List<Element> einstellungen = einstellung.getChildren("GeneralSettings");
            for (Element eingestellt : einstellungen) {
                modelRegionTextField.setText(eingestellt.getChild("ModelRegion").getText());
                randomnessCheckBox.setSelected(Boolean.parseBoolean(eingestellt.getChild("ErrorComponent").getText()));
                ingrowthCheckBox.setSelected(Boolean.parseBoolean(eingestellt.getChild("IngrowthModul").getText()));
                deadWoodModuleCheckBox.setSelected(Boolean.parseBoolean(eingestellt.getChild("DeadwoodModul").getText()));
                String ts = "5";
                try {
                    ts = eingestellt.getChild("TimeStep").getText();
                } catch (Exception e) {
                    ts = "5";
                }
                timeStepTextField.setText(ts);
                try {
                    authorTextField.setText(eingestellt.getChild("Author").getText());
                } catch (Exception e) {
                    authorTextField.setText("add author");
                }
                try {
                    dateTextField.setText(eingestellt.getChild("FirstDate").getText());
                } catch (Exception e) {
                    dateTextField.setText("add date");
                }
                try {
                    lastUpdateTextField.setText(eingestellt.getChild("LastChange").getText());
                } catch (Exception e) {
                    lastUpdateTextField.setText("add date");
                }
                try {
                    literatureTextField.setText(eingestellt.getChild("Literature").getText());
                } catch (Exception e) {
                    literatureTextField.setText("add literature");
                }
                try {
                    jTextArea1.setText(eingestellt.getChild("Description").getText());
                } catch (Exception e) {
                    jTextArea1.setText("add model info");
                }
                try {
                    sortingModuleTextField.setText(eingestellt.getChild("SortingModul").getText());
                } catch (Exception e) {
                    sortingModuleTextField.setText("none");
                }
                try {
                    biomassTextField.setText(eingestellt.getChild("BiomassModul").getText());
                } catch (Exception e) {
                    biomassTextField.setText("none");
                }
                try {
                    deadWoodModuleTextField.setText(eingestellt.getChild("DebriswoodModul").getText());
                } catch (Exception e) {
                    deadWoodModuleTextField.setText("none");
                }
                break;
            }
        } catch (IOException | NumberFormatException | JDOMException e) {
            e.printStackTrace();
        }
        renewList();
    }
    
    // TODO: add thinning definitions for type and intensity
    private static HeightBasedThinning extractDynamicThinning(String moderateThinningDefinition) {
        return new HeightBasedThinning(
                new ThinningDefinitions(
                        moderateThinningDefinition,
                        "",
                        ""
                ));
    }
    
    private void saveXMLFile(){
       String fn = urlname; 
       NumberFormat f = NumberFormat.getInstance(new Locale("en","US"));
       f.setMaximumFractionDigits(2);
       f.setMinimumFractionDigits(2);
       Element elt;
       Element elt2;
       Document doc = new Document();
       rootElt = new Element("ForestSimulatorSettings");
       ProcessingInstruction pi = new ProcessingInstruction("xml-stylesheet",
                 "type=\"text/xsl\" href=\"ForestSimulatorSettings.xsl\"");
       doc.addContent(pi);
       doc.setRootElement(rootElt);
//
       elt = new Element("GeneralSettings");
       elt = addString(elt, "ModelRegion", modelRegionTextField.getText());
       elt = addString(elt, "ErrorComponent",Boolean.toString(randomnessCheckBox.isSelected()));
       elt = addString(elt, "IngrowthModul",Boolean.toString(ingrowthCheckBox.isSelected()));
       elt = addString(elt, "DeadwoodModul",Boolean.toString(deadWoodModuleCheckBox.isSelected()));
       elt = addString(elt, "TimeStep",new Integer(timeStepTextField.getText().trim()).toString());
       elt = addString(elt, "Author",authorTextField.getText());
       elt = addString(elt, "FirstDate",dateTextField.getText());
       elt = addString(elt, "LastChange",lastUpdateTextField.getText());
       elt = addString(elt, "Literature",literatureTextField.getText());
       elt = addString(elt, "Description",jTextArea1.getText());
       elt = addString(elt, "SortingModul",sortingModuleTextField.getText());
       elt = addString(elt, "BiomassModul",biomassTextField.getText());
       elt = addString(elt, "DebriswoodModul",deadWoodModuleTextField.getText());
       rootElt.addContent(elt);
 
//         
       for (int i=0;i< nspd;i++){
            elt = new Element("SpeciesDefinition");
            elt = addString(elt, "Code", Integer.toString(spd[i].code));
            elt = addString(elt, "ShortName",spd[i].shortName);
            elt = addString(elt, "LongName",spd[i].longName);
            elt = addString(elt, "LatinName",spd[i].latinName);
            elt = addString(elt, "InternalCode", Integer.toString(spd[i].internalCode));
            elt = addString(elt, "CodeGroup", Integer.toString(spd[i].codeGroup));
            elt = addString(elt, "HandledLikeCode", Integer.toString(spd[i].handledLikeCode));
            elt = addString(elt, "HeightCurve", Integer.toString(spd[i].heightCurve));
            elt = addString(elt, "UniformHeightCurveXML",spd[i].uniformHeightCurveXML.toString());
            elt = addString(elt, "HeightVariation",spd[i].heightVariationXML.toString());
            elt = addString(elt, "DiameterDistributionXML",spd[i].diameterDistributionXML.toString());
            elt = addString(elt, "VolumeFunctionXML",spd[i].volumeFunctionXML.toString());
            elt = addString(elt, "StemVolumeFunction",spd[i].stemVolumeFunctionXML);
            elt = addString(elt, "Crownwidth",spd[i].crownwidthXML.toString());
            elt = addString(elt, "Crownbase",spd[i].crownbaseXML.toString());
            elt = addString(elt, "CrownType", Integer.toString(spd[i].crownType));
            elt = addString(elt, "SiteIndex",spd[i].siteindexXML.toString());
            elt = addString(elt, "SiteIndexHeight",spd[i].siteindexHeightXML.toString());
            elt = addString(elt, "PotentialHeightIncrement",spd[i].potentialHeightIncrementXML.toString());
            elt = addString(elt, "HeightIncrement",spd[i].heightIncrementXML.toString());
            elt = addString(elt, "HeightIncrementError", Double.toString(spd[i].heightIncrementError));
            elt = addString(elt, "DiameterIncrement",spd[i].diameterIncrementXML.toString());
            elt = addString(elt, "DiameterIncrementError", Double.toString(spd[i].diameterIncrementError));
            elt = addString(elt, "MaximumDensity", spd[i].maximumDensityXML.toString());
            elt = addString(elt, "CropTreeNumber", Integer.toString(spd[i].cropTreeNumber));
            elt = addString(elt, "MaximumAge", Integer.toString(spd[i].maximumAge));
            elt = addString(elt, "Ingrowth", spd[i].ingrowthXML);
            elt = addString(elt, "Decay",spd[i].decayXML.toString());
            elt = addString(elt, "TargetDiameter", Double.toString(spd[i].targetDiameter));
            elt = addString(elt, "HeightOfThinningStart", Double.toString(spd[i].heightOfThinningStart));
            elt = addString(elt, "ModerateThinning", spd[i].dynamicThinning.moderateThinningDefinition());
            elt = addString(elt, "Color",spd[i].colorXML);
            elt = addString(elt, "Competition",spd[i].competitionXML);
            elt = addString(elt, "TaperFunction",spd[i].taperFunctionXML);
            elt = addString(elt, "CoarseRootBiomass",spd[i].coarseRootBiomass);
            elt = addString(elt, "SmallRootBiomass",spd[i].smallRootBiomass);
            elt = addString(elt, "FineRootBiomass",spd[i].fineRootBiomass);
            elt = addString(elt, "TotalRootBiomass",spd[i].totalRootBiomass);
            rootElt.addContent(elt);
        }
        try (FileOutputStream result = new FileOutputStream(fn)) {
            XMLOutputter outputter = new XMLOutputter();
//            outputter.setNewlines(true);
//            outputter.setIndent("  ");
            outputter.output(doc, result);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    Element addString(Element elt, String variable, String text) {
        Element var = new Element(variable);
        var.addContent(text);
        elt.addContent(var);
        return elt;
    }

    private void loadTable(int m){
      if (m >= 0){  
        jTable1.setValueAt("Baumarten Code (I) ",0,0);
        jTable1.setValueAt("Kurzname ",1,0);
        jTable1.setValueAt("Name ",2,0);
        jTable1.setValueAt("lateinisch ",3,0);
        jTable1.setValueAt("Interner Code (I) ",4,0);
        jTable1.setValueAt("Gruppen Code (I) ",5,0);
        jTable1.setValueAt("Einstellungen wie Code (I) ",6,0);
        jTable1.setValueAt("Height Curve (I)",7,0);
        jTable1.setValueAt("Uniform Height Curve ",8,0);
        jTable1.setValueAt("Height Variation",9,0);
        jTable1.setValueAt("Diameter distribution",10,0);
        jTable1.setValueAt("Volume Function o.B.",11,0);
        jTable1.setValueAt("Stem Volume Function o.B.",12,0);
        jTable1.setValueAt("Crown width",13,0);
        jTable1.setValueAt("Crown base",14,0);
        jTable1.setValueAt("Crown type",15,0);
        jTable1.setValueAt("Site index",16,0);
        jTable1.setValueAt("Index height",17,0);
        jTable1.setValueAt("Potential height increment",18,0);
        jTable1.setValueAt("Height Increment",19,0);
        jTable1.setValueAt("Height Increment Error",20,0);
        jTable1.setValueAt("Quadratic Diameter Increment",21,0);
        jTable1.setValueAt("Diameter Increment Error",22,0);
        jTable1.setValueAt("Maximum Density",23,0);
        jTable1.setValueAt("Maximum Age",24,0);
        jTable1.setValueAt("Plugin Ingrowth",25,0);
        jTable1.setValueAt("Decay",26,0);
        jTable1.setValueAt("Target Diameter",27,0);
        jTable1.setValueAt("Height of first Thinning",28,0);
        jTable1.setValueAt("Moderate Thinning Factor",29,0);
        jTable1.setValueAt("Color",30,0);
        jTable1.setValueAt("Plugin Competition",31,0);
        jTable1.setValueAt("Plugin Taper Fuction",32,0);
        jTable1.setValueAt("Grobwurzelbiomasse Funktion",33,0);
        jTable1.setValueAt("Kleinwurzelbiomasse Funktion",34,0);
        jTable1.setValueAt("Feinwurzelbiomasse Funktion",35,0);
        jTable1.setValueAt("Gesamtwurzelbiomasse Funktion",36,0);
        jTable1.setValueAt("Anzahl der Z-Bäume",37,0);
        jTable1.setValueAt(Integer.toString(spd[m].code),0,1);
        jTable1.setValueAt(spd[m].shortName,1,1);
        jTable1.setValueAt(spd[m].longName,2,1);
        jTable1.setValueAt(spd[m].latinName,3,1);
        jTable1.setValueAt(Integer.toString(spd[m].internalCode),4,1);
        jTable1.setValueAt(Integer.toString(spd[m].codeGroup),5,1);
        jTable1.setValueAt(Integer.toString(spd[m].handledLikeCode),6,1);
        jTable1.setValueAt(Integer.toString(spd[m].heightCurve),7,1);
        jTable1.setValueAt(spd[m].uniformHeightCurveXML,8,1);
        jTable1.setValueAt(spd[m].heightVariationXML,9,1);
        jTable1.setValueAt(spd[m].diameterDistributionXML,10,1);
        jTable1.setValueAt(spd[m].volumeFunctionXML,11,1);
        jTable1.setValueAt(spd[m].stemVolumeFunctionXML,12,1);
        jTable1.setValueAt(spd[m].crownwidthXML,13,1);
        jTable1.setValueAt(spd[m].crownbaseXML,14,1);
        jTable1.setValueAt(Integer.toString(spd[m].crownType),15,1);
        jTable1.setValueAt(spd[m].siteindexXML,16,1);
        jTable1.setValueAt(spd[m].siteindexHeightXML,17,1);
        jTable1.setValueAt(spd[m].potentialHeightIncrementXML,18,1);
        jTable1.setValueAt(spd[m].heightIncrementXML,19,1);
        jTable1.setValueAt(Double.toString(spd[m].heightIncrementError),20,1);
        jTable1.setValueAt(spd[m].diameterIncrementXML,21,1);
        jTable1.setValueAt(Double.toString(spd[m].diameterIncrementError),22,1);
        jTable1.setValueAt(spd[m].maximumDensityXML,23,1);
        jTable1.setValueAt(Integer.toString(spd[m].maximumAge),24,1);
        jTable1.setValueAt(spd[m].ingrowthXML,25,1);
        jTable1.setValueAt(spd[m].decayXML,26,1);
        jTable1.setValueAt(Double.toString(spd[m].targetDiameter),27,1);
        jTable1.setValueAt(Double.toString(spd[m].heightOfThinningStart),28,1);
        jTable1.setValueAt(spd[m].dynamicThinning,29,1);
        jTable1.setValueAt(spd[m].colorXML,30,1);
        jTable1.setValueAt(spd[m].competitionXML,31,1);
        jTable1.setValueAt(spd[m].taperFunctionXML,32,1);
        jTable1.setValueAt(spd[m].coarseRootBiomass,33,1);
        jTable1.setValueAt(spd[m].smallRootBiomass,34,1);
        jTable1.setValueAt(spd[m].fineRootBiomass,35,1);
        jTable1.setValueAt(spd[m].totalRootBiomass,36,1);
        jTable1.setValueAt(Integer.toString(spd[m].cropTreeNumber),37,1);
      }
        
    }    
     
    private int stripCommentsFromInt(String orig, int stdValue){
        if(orig==null || orig.equals(""))
            return stdValue;       
        return Integer.parseInt(orig.split("[/][*].+?[*][/]")[0].trim());
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField authorTextField;
    private javax.swing.JLabel biomassLabel;
    private javax.swing.JTextField biomassTextField;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JTextField dateTextField;
    private javax.swing.JCheckBox deadWoodModuleCheckBox;
    private javax.swing.JLabel deadWoodModuleLabel;
    private javax.swing.JTextField deadWoodModuleTextField;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel generalSettingsLabel;
    private javax.swing.JCheckBox ingrowthCheckBox;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel lastUpdateLabel;
    private javax.swing.JTextField lastUpdateTextField;
    private javax.swing.JTextField literatureTextField;
    private javax.swing.JLabel modelRegionLabel;
    private javax.swing.JTextField modelRegionTextField;
    private javax.swing.JCheckBox randomnessCheckBox;
    private javax.swing.JButton saveAsNewButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton saveSettingsButton;
    private javax.swing.JLabel selectedSpeciesLabel;
    private javax.swing.JLabel sortingModuleLabel;
    private javax.swing.JTextField sortingModuleTextField;
    private javax.swing.JLabel timeStepLabel;
    private javax.swing.JTextField timeStepTextField;
    private javax.swing.JLabel treeSpeciesLabel;
    // End of variables declaration//GEN-END:variables
    
}
