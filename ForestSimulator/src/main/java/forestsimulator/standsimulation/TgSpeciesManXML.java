/* http://www.nw-fva.de
   Version 07-11-2008

   (c) 2002 Juergen Nagel, Northwest German Forest Research Station, 
       Grätzelstr.2, 37079 Göttingen, Germany
       E-Mail: Juergen.Nagel@nw-fva.de
 
This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT  WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
 */
package forestsimulator.standsimulation;
import treegross.base.*;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.ProcessingInstruction;
import org.jdom.output.XMLOutputter;
import org.jdom.input.*;
import org.jdom.DocType;
import java.net.*;
import java.text.*;
import java.io.*;
import java.util.*;


/**
 *
 * @author  nagel
 */
public class TgSpeciesManXML extends javax.swing.JDialog {
    
    SpeciesDef spd[] = new SpeciesDef[100];
    int nspd = 0;
    static Element rootElt;
    javax.swing.DefaultListModel listModel = new javax.swing.DefaultListModel();
    String urlname = null;

    
    /** Creates new form TgSpeciesManXML */
    public TgSpeciesManXML(java.awt.Frame parent, boolean modal, String workdir, String fn) {
        super(parent, modal);
        initComponents();
//        java.awt.Dimension scr = parent.getSize();
//        setPreferredSize(scr);
//        setSize(scr);
        urlname=workdir+System.getProperty("file.separator")+"models"+System.getProperty("file.separator")+fn;
        loadXMLFile();
//        int m = 1+ (int)(scr.width*0.1);
//        TableColumn col = jTable1.getColumnModel().getColumn( 0 );
//        col.setPreferredWidth(m );
//        TableColumn col1 = jTable1.getColumnModel().getColumn( 1 );
//        m = 1+ (int)(scr.width*0.8);
//        col1.setPreferredWidth(m);
        if (nspd > 0 ){
          loadTable(0);
          jList1.setSelectedIndex(0);
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jTextField4 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jTextField3 = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jTextField8 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jTextField9 = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Species Manager XML");
        setBackground(java.awt.Color.white);

        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel3.setText("Allgemeine Einstellungen");
        jPanel6.add(jLabel3);

        jLabel4.setText("Modellregion: ");
        jPanel6.add(jLabel4);

        jTextField1.setText("jTextField1");
        jTextField1.setPreferredSize(new java.awt.Dimension(259, 20));
        jPanel6.add(jTextField1);

        jCheckBox1.setSelected(true);
        jCheckBox1.setText("Zufallskomponente ");
        jPanel6.add(jCheckBox1);

        jCheckBox2.setText("Einwuchsmodell");
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });
        jPanel6.add(jCheckBox2);

        jCheckBox4.setText("Riskmodel");
        jPanel6.add(jCheckBox4);

        jCheckBox3.setText("Totholzmodul");
        jPanel6.add(jCheckBox3);

        jLabel5.setText("TimeStep");
        jPanel6.add(jLabel5);

        jTextField2.setText("5");
        jTextField2.setPreferredSize(new java.awt.Dimension(22, 20));
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });
        jPanel6.add(jTextField2);

        jPanel4.add(jPanel6, java.awt.BorderLayout.NORTH);

        jPanel7.setLayout(new java.awt.BorderLayout());

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jTextField4.setText("autor");
        jTextField4.setToolTipText("author");
        jTextField4.setPreferredSize(new java.awt.Dimension(232, 20));
        jPanel8.add(jTextField4);

        jLabel6.setText("Datum: ");
        jPanel8.add(jLabel6);

        jTextField5.setText("jTextField5");
        jTextField5.setPreferredSize(new java.awt.Dimension(80, 20));
        jPanel8.add(jTextField5);

        jLabel7.setText("Letzte Änderung:");
        jPanel8.add(jLabel7);

        jTextField6.setText("jTextField6");
        jTextField6.setPreferredSize(new java.awt.Dimension(80, 20));
        jPanel8.add(jTextField6);

        jPanel7.add(jPanel8, java.awt.BorderLayout.NORTH);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setToolTipText("description");
        jTextArea1.setPreferredSize(new java.awt.Dimension(164, 74));
        jScrollPane4.setViewportView(jTextArea1);

        jPanel7.add(jScrollPane4, java.awt.BorderLayout.CENTER);

        jTextField3.setText("Literature");
        jTextField3.setToolTipText("Literature");
        jPanel7.add(jTextField3, java.awt.BorderLayout.PAGE_END);

        jPanel4.add(jPanel7, java.awt.BorderLayout.CENTER);

        jPanel9.setLayout(new java.awt.GridLayout(1, 6));

        jLabel8.setText("Sortierungsmodul:");
        jPanel9.add(jLabel8);

        jTextField7.setText("none");
        jTextField7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField7ActionPerformed(evt);
            }
        });
        jPanel9.add(jTextField7);

        jLabel9.setText("Biomassemodul:");
        jPanel9.add(jLabel9);

        jTextField8.setText("none");
        jPanel9.add(jTextField8);

        jLabel10.setText("Totholzmodul");
        jPanel9.add(jLabel10);

        jTextField9.setText("none");
        jPanel9.add(jTextField9);

        jPanel4.add(jPanel9, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jPanel4, java.awt.BorderLayout.NORTH);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jLabel2.setText("ausgewählte Art");
        jPanel1.add(jLabel2, java.awt.BorderLayout.PAGE_START);

        jPanel5.setLayout(new java.awt.BorderLayout());

        jScrollPane2.setAutoscrolls(true);

        jTable1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Variable", "XML Code"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jPanel5.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel5, java.awt.BorderLayout.CENTER);

        jButton1.setText("save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Save as new species");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("save settings to file");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Löschen");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jButton1)
                .addGap(15, 15, 15)
                .addComponent(jButton2)
                .addGap(21, 21, 21)
                .addComponent(jButton4)
                .addGap(16, 16, 16)
                .addComponent(jButton3)
                .addContainerGap(625, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton4))
                .addGap(37, 37, 37))
        );

        jPanel1.add(jPanel3, java.awt.BorderLayout.SOUTH);

        jScrollPane3.setViewportView(jPanel1);

        getContentPane().add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jPanel2.setPreferredSize(new java.awt.Dimension(100, 600));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jLabel1.setText("Baumarten");
        jPanel2.add(jLabel1, java.awt.BorderLayout.NORTH);

        jList1.setModel(listModel);
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        jPanel2.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.WEST);

        setSize(new java.awt.Dimension(1196, 820));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
// TODO add your handling code here:
        int m = jList1.getSelectedIndex();
       
        for (int i=m+1;i< nspd;i++){
            spd[i-1]=spd[i];
        }
        nspd = nspd -1;
       

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
// TODO add your handling code here:
       int m = jList1.getSelectedIndex(); //get SelectedIndex from List
       saveTable(m);

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
// TODO add your handling code here:
       int m = jList1.getSelectedIndex(); //get SelectedIndex from List
       loadTable(m);

    }//GEN-LAST:event_jList1ValueChanged

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
// TODO add your handling code here:
        saveXMLFile();
        dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
// TODO add your handling code here:
        spd[nspd] = new SpeciesDef();
        saveTable(nspd);
        nspd = nspd +1;
       
        renewList();
    }//GEN-LAST:event_jButton2ActionPerformed

private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_jCheckBox2ActionPerformed

private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
    // TODO add your handling code here:
}//GEN-LAST:event_jTextField2ActionPerformed

    private void jTextField7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField7ActionPerformed

    private void renewList(){
        listModel.removeAllElements();
        listModel.clear();
        for (int i=0;i<nspd;i++) {listModel.addElement((String)spd[i].shortName);}
    }
    
    private void saveTable(int m){
        SpeciesDefMap sdm = new SpeciesDefMap();
        spd[m].code = Integer.parseInt((String) jTable1.getValueAt(0,1));
        spd[m].shortName=(String) jTable1.getValueAt(1,1);
        spd[m].longName=(String) jTable1.getValueAt(2,1);
        spd[m].latinName=(String) jTable1.getValueAt(3,1);
        spd[m].internalCode = Integer.parseInt((String) jTable1.getValueAt(4,1));
        spd[m].codeGroup = Integer.parseInt((String) jTable1.getValueAt(5,1));
        spd[m].handledLikeCode = Integer.parseInt((String) jTable1.getValueAt(6,1));
        spd[m].heightCurve = getInt((String) jTable1.getValueAt(7,1));
        spd[m].uniformHeightCurveXML=sdm.initTGFunction(jTable1.getValueAt(8,1).toString());
        spd[m].heightVariationXML=sdm.initTGFunction(jTable1.getValueAt(9,1).toString());
        spd[m].diameterDistributionXML=sdm.initTGFunction(jTable1.getValueAt(10,1).toString());
        spd[m].volumeFunctionXML=sdm.initTGFunction(jTable1.getValueAt(11,1).toString());
        spd[m].stemVolumeFunctionXML=(String) jTable1.getValueAt(12,1);
        spd[m].crownwidthXML=sdm.initTGFunction(jTable1.getValueAt(13,1).toString());
        spd[m].crownbaseXML=sdm.initTGFunction(jTable1.getValueAt(14,1).toString());
        spd[m].crownType = getInt((String) jTable1.getValueAt(15,1));
        spd[m].siteindexXML=sdm.initTGFunction(jTable1.getValueAt(16,1).toString());
        spd[m].siteindexHeightXML=sdm.initTGFunction(jTable1.getValueAt(17,1).toString());
        spd[m].potentialHeightIncrementXML=sdm.initTGFunction(jTable1.getValueAt(18,1).toString());
        spd[m].heightIncrementXML=sdm.initTGFunction(jTable1.getValueAt(19,1).toString());
        spd[m].heightIncrementError = getDouble((String) jTable1.getValueAt(20,1));
        spd[m].diameterIncrementXML=sdm.initTGFunction(jTable1.getValueAt(21,1).toString());
        spd[m].diameterIncrementError = getDouble((String) jTable1.getValueAt(22,1));
        spd[m].maximumDensityXML = sdm.initTGFunction(jTable1.getValueAt(23,1).toString());
        spd[m].maximumAge = getInt((String) jTable1.getValueAt(24,1));
        spd[m].ingrowthXML = (String) jTable1.getValueAt(25,1);
        spd[m].decayXML = sdm.initTGFunction(jTable1.getValueAt(26,1).toString());
        spd[m].cropTreeNumber = getInt((String) jTable1.getValueAt(37,1));
        spd[m].targetDiameter = getDouble((String) jTable1.getValueAt(27,1));
        spd[m].heightOfThinningStart = getDouble((String) jTable1.getValueAt(28,1));
        spd[m].moderateThinning = (String) jTable1.getValueAt(29,1);
        spd[m].colorXML = (String) jTable1.getValueAt(30,1);
        spd[m].competitionXML = (String) jTable1.getValueAt(31,1);
        spd[m].mortalityXML = (String) jTable1.getValueAt(32,1);
        spd[m].taperFunctionXML = (String) jTable1.getValueAt(33,1);
        spd[m].coarseRootBiomass = (String) jTable1.getValueAt(34,1);
        spd[m].smallRootBiomass = (String) jTable1.getValueAt(35,1);
        spd[m].fineRootBiomass = (String) jTable1.getValueAt(36,1);
        spd[m].totalRootBiomass = (String) jTable1.getValueAt(37,1);
        
    }
    
    private int getInt(String s){
        int i=-9;
        try {
          i = Integer.parseInt(s); 
        }
        catch (Exception e)  {	System.out.println(e); }
        return i;
    }
    private double getDouble(String s){
        double d=-9;
        try {
          d = Double.parseDouble(s); 
        }
        catch (Exception e)  {	System.out.println(e); }
        return d;
    }
    
    private void loadXMLFile(){
       SpeciesDefMap sdm = new SpeciesDefMap();
        nspd=0;
        try {
          String fname="";
          
          int m = urlname.toUpperCase().indexOf("FILE");
          int m2 = urlname.toUpperCase().indexOf("HTTP");
          if ( m < 0 && m2 <0 ) fname="file:///"+urlname;
          else fname=urlname;
          URL url = new URL(fname);
         SAXBuilder builder = new SAXBuilder();
         URLConnection urlcon = url.openConnection();

         Document doc = builder.build(urlcon.getInputStream());
         
         DocType docType = doc.getDocType();
//
         
         Element sortimente =  doc.getRootElement();  
         List Sortiment = sortimente.getChildren("SpeciesDefinition");
         Iterator i = Sortiment.iterator();
         
         while (i.hasNext()) {
            Element sortiment = (Element) i.next();
            spd[nspd] = new SpeciesDef();
            spd[nspd].code =Integer.parseInt(sortiment.getChild("Code").getText());
            spd[nspd].internalCode =Integer.parseInt(sortiment.getChild("InternalCode").getText());
            spd[nspd].shortName = sortiment.getChild("ShortName").getText();
            spd[nspd].longName = sortiment.getChild("LongName").getText();
            spd[nspd].latinName = sortiment.getChild("LatinName").getText();
            spd[nspd].codeGroup =Integer.parseInt(sortiment.getChild("CodeGroup").getText());
            spd[nspd].handledLikeCode =Integer.parseInt(sortiment.getChild("HandledLikeCode").getText());
            String temp = sortiment.getChild("HeightCurve").getText();
            int ix = Integer.parseInt(temp);
            spd[nspd].heightCurve = ix;
            spd[nspd].uniformHeightCurveXML = sdm.initTGFunction(sortiment.getChild("UniformHeightCurveXML").getText());
            spd[nspd].heightVariationXML = sdm.initTGFunction(sortiment.getChild("HeightVariation").getText());
            spd[nspd].diameterDistributionXML =sdm.initTGFunction( sortiment.getChild("DiameterDistributionXML").getText());
            spd[nspd].volumeFunctionXML =sdm.initTGFunction( sortiment.getChild("VolumeFunctionXML").getText());
            spd[nspd].crownwidthXML = sdm.initTGFunction(sortiment.getChild("Crownwidth").getText());
            spd[nspd].crownbaseXML = sdm.initTGFunction(sortiment.getChild("Crownbase").getText());
            spd[nspd].crownType =Integer.parseInt(sortiment.getChild("CrownType").getText());
            try { spd[nspd].cropTreeNumber = stripCommentsFromInt(sortiment.getChild("CropTreeNumber").getText(),100);
              } catch (Exception e){ System.out.println("Number of crop trees ist nicht definiert: ");
                                    spd[nspd].cropTreeNumber = 100;}
            
            spd[nspd].siteindexXML = sdm.initTGFunction(sortiment.getChild("SiteIndex").getText());
            spd[nspd].siteindexHeightXML = sdm.initTGFunction(sortiment.getChild("SiteIndexHeight").getText());
            spd[nspd].potentialHeightIncrementXML = sdm.initTGFunction(sortiment.getChild("PotentialHeightIncrement").getText());
            spd[nspd].heightIncrementXML = sdm.initTGFunction(sortiment.getChild("HeightIncrement").getText());
            spd[nspd].heightIncrementError =Double.parseDouble(sortiment.getChild("HeightIncrementError").getText());
            spd[nspd].diameterIncrementXML = sdm.initTGFunction(sortiment.getChild("DiameterIncrement").getText());
            spd[nspd].diameterIncrementError =Double.parseDouble(sortiment.getChild("DiameterIncrementError").getText());
            spd[nspd].maximumDensityXML = sdm.initTGFunction(sortiment.getChild("MaximumDensity").getText());
            spd[nspd].maximumAge =Integer.parseInt(sortiment.getChild("MaximumAge").getText());
            spd[nspd].ingrowthXML = sortiment.getChild("Ingrowth").getText();
            spd[nspd].decayXML = sdm.initTGFunction(sortiment.getChild("Decay").getText());
            spd[nspd].targetDiameter =Double.parseDouble(sortiment.getChild("TargetDiameter").getText());
            spd[nspd].heightOfThinningStart =Double.parseDouble(sortiment.getChild("HeightOfThinningStart").getText());
            spd[nspd].moderateThinning = sortiment.getChild("ModerateThinning").getText();
            spd[nspd].colorXML = sortiment.getChild("Color").getText();
            spd[nspd].competitionXML = sortiment.getChild("Competition").getText();
            try {  spd[nspd].mortalityXML = sortiment.getChild("Mortality").getText();
                 } catch (Exception e){ spd[nspd].mortalityXML="treegross.base.Mortality";}
            spd[nspd].taperFunctionXML = sortiment.getChild("TaperFunction").getText();
            try {  spd[nspd].stemVolumeFunctionXML = sortiment.getChild("StemVolumeFunction").getText();
                 } catch (Exception e){ System.out.println("Schaftholz ist nicht definiert: ");}
            spd[nspd].coarseRootBiomass = sortiment.getChild("CoarseRootBiomass").getText();
            spd[nspd].smallRootBiomass = sortiment.getChild("SmallRootBiomass").getText();
            spd[nspd].fineRootBiomass = sortiment.getChild("FineRootBiomass").getText();
            spd[nspd].totalRootBiomass = sortiment.getChild("TotalRootBiomass").getText();
         
            nspd = nspd +1;
         } 
         
         Element einstellung =  doc.getRootElement(); 
         List einstellungen = einstellung.getChildren("GeneralSettings");
         Iterator k = einstellungen.iterator();
         
         while (k.hasNext()) {
            Element eingestellt = (Element) k.next();
            jTextField1.setText(eingestellt.getChild("ModelRegion").getText());
            jCheckBox1.setSelected(Boolean.parseBoolean(eingestellt.getChild("ErrorComponent").getText()));
            jCheckBox2.setSelected(Boolean.parseBoolean(eingestellt.getChild("IngrowthModul").getText()));
            jCheckBox3.setSelected(Boolean.parseBoolean(eingestellt.getChild("DeadwoodModul").getText()));
            try {  jCheckBox4.setSelected(Boolean.parseBoolean(eingestellt.getChild("RiskModul").getText()));
                 } catch (Exception e){  jCheckBox4.setSelected(false);}
            String ts = "5";
            try {  ts = eingestellt.getChild("TimeStep").getText();
                 } catch (Exception e){ ts = "5";}
            jTextField2.setText(ts);
            try {  jTextField4.setText(eingestellt.getChild("Author").getText());
                 } catch (Exception e){ jTextField4.setText("add author");}
            try {  jTextField5.setText(eingestellt.getChild("FirstDate").getText());
                 } catch (Exception e){ jTextField5.setText("add date");}
            try {  jTextField6.setText(eingestellt.getChild("LastChange").getText());
                 } catch (Exception e){ jTextField6.setText("add date");}
            try {  jTextField3.setText(eingestellt.getChild("Literature").getText());
                 } catch (Exception e){ jTextField3.setText("add literature");}
            try {  jTextArea1.setText(eingestellt.getChild("Description").getText());
                 } catch (Exception e){ jTextArea1.setText("add model info");}
            try {  jTextField7.setText(eingestellt.getChild("SortingModul").getText());
                 } catch (Exception e){ jTextField7.setText("none");}
            try {  jTextField8.setText(eingestellt.getChild("BiomassModul").getText());
                 } catch (Exception e){ jTextField8.setText("none");}
            try {  jTextField9.setText(eingestellt.getChild("DebriswoodModul").getText());
                 } catch (Exception e){ jTextField9.setText("none");}
            break;
         }


       } catch (Exception e) {e.printStackTrace();}
      
       renewList();
        
    }
    
    private void saveXMLFile(){
       String fn = urlname; 
       NumberFormat f=NumberFormat.getInstance();
       f=NumberFormat.getInstance(new Locale("en","US"));
       f.setMaximumFractionDigits(2);
       f.setMinimumFractionDigits(2);
       Element elt;
       Element elt2;
       Document doc = new Document();
       rootElt = new Element("ForestSimulatorSettings");
       ProcessingInstruction pi = new ProcessingInstruction("xml-stylesheet",
                 "type=\"text/xsl\" href=\"ForestSimulatorSettings.xsl\"");
       doc.addContent(pi);
       doc.setRootElement(rootElt);
//
       elt = new Element("GeneralSettings");
       elt = addString(elt, "ModelRegion", jTextField1.getText());
       elt = addString(elt, "ErrorComponent",new Boolean(jCheckBox1.isSelected()).toString());
       elt = addString(elt, "IngrowthModul",new Boolean(jCheckBox2.isSelected()).toString());
       elt = addString(elt, "DeadwoodModul",new Boolean(jCheckBox3.isSelected()).toString());
       elt = addString(elt, "RiskModul",new Boolean(jCheckBox4.isSelected()).toString());
       elt = addString(elt, "TimeStep",new Integer(jTextField2.getText().trim()).toString());
       elt = addString(elt, "Author",jTextField4.getText());
       elt = addString(elt, "FirstDate",jTextField5.getText());
       elt = addString(elt, "LastChange",jTextField6.getText());
       elt = addString(elt, "Literature",jTextField3.getText());
       elt = addString(elt, "Description",jTextArea1.getText());
       elt = addString(elt, "SortingModul",jTextField7.getText());
       elt = addString(elt, "BiomassModul",jTextField8.getText());
       elt = addString(elt, "DebriswoodModul",jTextField9.getText());
       rootElt.addContent(elt);
 
//         
       for (int i=0;i< nspd;i++){
            elt = new Element("SpeciesDefinition");
            elt = addString(elt, "Code", new Integer(spd[i].code).toString());
            elt = addString(elt, "ShortName",spd[i].shortName);
            elt = addString(elt, "LongName",spd[i].longName);
            elt = addString(elt, "LatinName",spd[i].latinName);
            elt = addString(elt, "InternalCode", new Integer(spd[i].internalCode).toString());
            elt = addString(elt, "CodeGroup", new Integer(spd[i].codeGroup).toString());
            elt = addString(elt, "HandledLikeCode", new Integer(spd[i].handledLikeCode).toString());
            elt = addString(elt, "HeightCurve", new Integer(spd[i].heightCurve).toString());
            elt = addString(elt, "UniformHeightCurveXML",spd[i].uniformHeightCurveXML.toString());
            elt = addString(elt, "HeightVariation",spd[i].heightVariationXML.toString());
            elt = addString(elt, "DiameterDistributionXML",spd[i].diameterDistributionXML.toString());
            elt = addString(elt, "VolumeFunctionXML",spd[i].volumeFunctionXML.toString());
            elt = addString(elt, "StemVolumeFunction",spd[i].stemVolumeFunctionXML);
            elt = addString(elt, "Crownwidth",spd[i].crownwidthXML.toString());
            elt = addString(elt, "Crownbase",spd[i].crownbaseXML.toString());
            elt = addString(elt, "CrownType", new Integer(spd[i].crownType).toString());
            elt = addString(elt, "SiteIndex",spd[i].siteindexXML.toString());
            elt = addString(elt, "SiteIndexHeight",spd[i].siteindexHeightXML.toString());
            elt = addString(elt, "PotentialHeightIncrement",spd[i].potentialHeightIncrementXML.toString());
            elt = addString(elt, "HeightIncrement",spd[i].heightIncrementXML.toString());
            elt = addString(elt, "HeightIncrementError", new Double(spd[i].heightIncrementError).toString());
            elt = addString(elt, "DiameterIncrement",spd[i].diameterIncrementXML.toString());
            elt = addString(elt, "DiameterIncrementError", new Double(spd[i].diameterIncrementError).toString());
            elt = addString(elt, "MaximumDensity", spd[i].maximumDensityXML.toString());
            elt = addString(elt, "CropTreeNumber", new Integer(spd[i].cropTreeNumber).toString());
            elt = addString(elt, "MaximumAge", new Integer(spd[i].maximumAge).toString());
            elt = addString(elt, "Ingrowth", spd[i].ingrowthXML);
            elt = addString(elt, "Decay",spd[i].decayXML.toString());
            elt = addString(elt, "TargetDiameter", new Double(spd[i].targetDiameter).toString());
            elt = addString(elt, "HeightOfThinningStart", new Double(spd[i].heightOfThinningStart).toString());
            elt = addString(elt, "ModerateThinning", spd[i].moderateThinning.toString());
            elt = addString(elt, "Color",spd[i].colorXML);
            elt = addString(elt, "Competition",spd[i].competitionXML);
            elt = addString(elt, "Mortality",spd[i].mortalityXML);
            elt = addString(elt, "TaperFunction",spd[i].taperFunctionXML);
            elt = addString(elt, "CoarseRootBiomass",spd[i].coarseRootBiomass);
            elt = addString(elt, "SmallRootBiomass",spd[i].smallRootBiomass);
            elt = addString(elt, "FineRootBiomass",spd[i].fineRootBiomass);
            elt = addString(elt, "TotalRootBiomass",spd[i].totalRootBiomass);
            rootElt.addContent(elt);
        }
        try {
            File file = new File(fn);
            FileOutputStream result = new FileOutputStream(file);
            XMLOutputter outputter = new XMLOutputter();
//            outputter.setNewlines(true);
//            outputter.setIndent("  ");
            outputter.output(doc,result);
 
                        
        }
        catch (IOException e){
            e.printStackTrace();
        }
   

    }
    
         Element addString(Element elt, String variable, String text){
            Element var = new Element(variable);
            var.addContent(text);  
            elt.addContent(var);
            return elt;
    }

    private void loadTable(int m){
      if (m >= 0){  
        jTable1.setValueAt("Baumarten Code (I) ",0,0);
        jTable1.setValueAt("Kurzname ",1,0);
        jTable1.setValueAt("Name ",2,0);
        jTable1.setValueAt("lateinisch ",3,0);
        jTable1.setValueAt("Interner Code (I) ",4,0);
        jTable1.setValueAt("Gruppen Code (I) ",5,0);
        jTable1.setValueAt("Einstellungen wie Code (I) ",6,0);
        jTable1.setValueAt("Height Curve (I)",7,0);
        jTable1.setValueAt("Uniform Height Curve ",8,0);
        jTable1.setValueAt("Height Variation",9,0);
        jTable1.setValueAt("Diameter distribution",10,0);
        jTable1.setValueAt("Volume Function o.B.",11,0);
        jTable1.setValueAt("Stem Volume Function o.B.",12,0);
        jTable1.setValueAt("Crown width",13,0);
        jTable1.setValueAt("Crown base",14,0);
        jTable1.setValueAt("Crown type",15,0);
        jTable1.setValueAt("Site index",16,0);
        jTable1.setValueAt("Index height",17,0);
        jTable1.setValueAt("Potential height increment",18,0);
        jTable1.setValueAt("Height Increment",19,0);
        jTable1.setValueAt("Height Increment Error",20,0);
        jTable1.setValueAt("Quadratic Diameter Increment",21,0);
        jTable1.setValueAt("Diameter Increment Error",22,0);
        jTable1.setValueAt("Maximum Density",23,0);
        jTable1.setValueAt("Maximum Age",24,0);
        jTable1.setValueAt("Plugin Ingrowth",25,0);
        jTable1.setValueAt("Decay",26,0);
        jTable1.setValueAt("Target Diameter",27,0);
        jTable1.setValueAt("Height of first Thinning",28,0);
        jTable1.setValueAt("Moderate Thinning Factor",29,0);
        jTable1.setValueAt("Color",30,0);
        jTable1.setValueAt("Plugin Competition",31,0);
        jTable1.setValueAt("Plugin Mortality",32,0);
        jTable1.setValueAt("Plugin Taper Fuction",33,0);
        jTable1.setValueAt("Grobwurzelbiomasse Funktion",34,0);
        jTable1.setValueAt("Kleinwurzelbiomasse Funktion",35,0);
        jTable1.setValueAt("Feinwurzelbiomasse Funktion",36,0);
        jTable1.setValueAt("Gesamtwurzelbiomasse Funktion",37,0);
        jTable1.setValueAt("Anzahl der Z-Bäume",38,0);
        jTable1.setValueAt(new Integer(spd[m].code).toString(),0,1);
        jTable1.setValueAt(spd[m].shortName,1,1);
        jTable1.setValueAt(spd[m].longName,2,1);
        jTable1.setValueAt(spd[m].latinName,3,1);
        jTable1.setValueAt(new Integer(spd[m].internalCode).toString(),4,1);
        jTable1.setValueAt(new Integer(spd[m].codeGroup).toString(),5,1);
        jTable1.setValueAt(new Integer(spd[m].handledLikeCode).toString(),6,1);
        jTable1.setValueAt(new Integer(spd[m].heightCurve).toString(),7,1);
        jTable1.setValueAt(spd[m].uniformHeightCurveXML,8,1);
        jTable1.setValueAt(spd[m].heightVariationXML,9,1);
        jTable1.setValueAt(spd[m].diameterDistributionXML,10,1);
        jTable1.setValueAt(spd[m].volumeFunctionXML,11,1);
        jTable1.setValueAt(spd[m].stemVolumeFunctionXML,12,1);
        jTable1.setValueAt(spd[m].crownwidthXML,13,1);
        jTable1.setValueAt(spd[m].crownbaseXML,14,1);
        jTable1.setValueAt(new Integer(spd[m].crownType).toString(),15,1);
        jTable1.setValueAt(spd[m].siteindexXML,16,1);
        jTable1.setValueAt(spd[m].siteindexHeightXML,17,1);
        jTable1.setValueAt(spd[m].potentialHeightIncrementXML,18,1);
        jTable1.setValueAt(spd[m].heightIncrementXML,19,1);
        jTable1.setValueAt(new Double(spd[m].heightIncrementError).toString(),20,1);
        jTable1.setValueAt(spd[m].diameterIncrementXML,21,1);
        jTable1.setValueAt(new Double(spd[m].diameterIncrementError).toString(),22,1);
        jTable1.setValueAt(spd[m].maximumDensityXML,23,1);
        jTable1.setValueAt(new Integer(spd[m].maximumAge).toString(),24,1);
        jTable1.setValueAt(spd[m].ingrowthXML,25,1);
        jTable1.setValueAt(spd[m].decayXML,26,1);
        jTable1.setValueAt(new Double(spd[m].targetDiameter).toString(),27,1);
        jTable1.setValueAt(new Double(spd[m].heightOfThinningStart).toString(),28,1);
        jTable1.setValueAt(spd[m].moderateThinning,29,1);
        jTable1.setValueAt(spd[m].colorXML,30,1);
        jTable1.setValueAt(spd[m].competitionXML,31,1);
        jTable1.setValueAt(spd[m].mortalityXML,32,1);
        jTable1.setValueAt(spd[m].taperFunctionXML,33,1);
        jTable1.setValueAt(spd[m].coarseRootBiomass,34,1);
        jTable1.setValueAt(spd[m].smallRootBiomass,35,1);
        jTable1.setValueAt(spd[m].fineRootBiomass,36,1);
        jTable1.setValueAt(spd[m].totalRootBiomass,37,1);
        jTable1.setValueAt(new Integer(spd[m].cropTreeNumber).toString(),38,1);
      }
        
    }    
     
    private int stripCommentsFromInt(String orig, int stdValue){
        if(orig==null || orig.equals(""))
            return stdValue;       
        return Integer.parseInt(orig.split("[/][*].+?[*][/]")[0].trim());
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    // End of variables declaration//GEN-END:variables
    
}
